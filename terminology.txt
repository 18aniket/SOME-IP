pduR

PduR stands for Protocol Data Unit Router in the Service-Oriented Middleware over IP (SOME/IP) protocol. PduR is responsible for routing SOME/IP protocol data units (PDUs) between different service instances and clients in the system. It is responsible for managing the routing tables, managing the connection state, and handling the flow control of the PDUs. PduR also provides a mechanism for handling service discovery and service binding, which enables clients to find and connect to the appropriate service instances.

SOME/IP Transport Protocol (TP) modul

The SOME/IP Transport Protocol (TP) module is a component within the SOME/IP protocol stack that is responsible for the reliable and efficient transport of PDUs (Protocol Data Units) over the network. It provides a number of features such as error correction, flow control, and message segmentation/reassembly.

The SOME/IP TP module is based on the ISO-OSI Transport Layer (layer 4) and it is responsible for ensuring that the PDUs are delivered to their intended destination in a reliable and efficient manner. It uses the User Datagram Protocol (UDP) as the underlying transport protocol, which allows for low overhead and high throughput, making it well suited for use in automotive systems.

The SOME/IP TP module also provides mechanisms for flow control, which allows for the efficient use of network resources and prevents overloading of the system. It also provides error correction mechanisms such as retransmission of lost or corrupted PDUs, to ensure the integrity of the data being transmitted.

Overall, the SOME/IP TP module plays an important role in the overall functionality of the SOME/IP protocol by ensuring that PDUs are delivered reliably and efficiently over the network, thus enabling the communication between service instances and clients.

Example for MTU.
An original SOME/IP message of 5571 bytes payload has to be transmitted.
The Length field of this original SOME/IP message is set to 8 + 5571 bytes.
This original SOME/IP message will now be segmented into 5 consecutive SOME/
IP segments. Every payload of these segments carries at most 1392 bytes in this
example.
JUSTIFICATION:
The maximum size of a SOME/IP message can vary depending on the implementation and the underlying transport protocol. In general, the maximum size of a SOME/IP message should not exceed the maximum transmission unit (MTU) of the underlying network, which is typically around 1500 bytes for Ethernet networks. However, this can be larger or smaller depending on the specific implementation and network configuration.


Message Length Limitations:-
In combination with regular Ethernet, IPv4 and UDP can transport packets with up to 1472 Bytes of data without fragmentation, while IPv6 uses additional 20 Bytes. Especially for small systems fragmentation shall be avoided, so the
SOME/IP header and payload shall be of limited length. The possible usage of security
protocols further limits the maximal size of SOME/IP messages.
When using UDP as transport protocol SOME/IP messages
shall use up to 1416 Bytes for the SOME/IP header and payload, so that 1400 Bytes
are available for the payload.
The usage of TCP allows for larger streams of data to transport SOME/IP header
and payload. However, current transport protocols for CAN and FlexRay as well as
AUTOSAR limit messages to 4095 Bytes. When compatibility to those has to be
achieved, SOME/IP messages including the SOME/IP header shall not exceed 4095
Bytes.


Endianess:-
All RPC-Headers shall be encoded in network byte order (big
endian) [RFC 791]. The byte order of the parameters inside the payload shall be defined by the interface definition (i.e. FIBEX or ARXML) and shall be in network byte
order when possible and if no other byte order is specified.
This means that Length and Type fields shall be always in
network byte order. 

-------------------------------------------------------

General
SOME/IP-SD is used to
• Locate service instances.
• Detect if service instances are running.
• Implement the Publish/Subscribe handling.
Inside the vehicular network service instance locations are commonly known; therefore, the state of the service instance is of primary concern. The location of the service
(i.e. IP-Address, transport protocol, and port number) are of secondary concern.



SOME/IP and SOME/IP-SD may be implemented in AUTOSAR in different modules.
Currently the Socket Adaptor may write the Message-ID and Length field by means of
the header mode.

DATA PATH:-
For the data path (SOME/IP), the message may be serialized/deserialized by the COM,
an pluggable serializer in the RTE, or a proxy SWS.


CONTROL PATH:-
For the control path (SOME/IP-SD), the Service Discovery Module implements
SOME/IP-SD including the SOME/IP headers without the Message-ID and Length field
itself.

Please be aware that not all parts of SOME/IP are implemented in AUTOSAR.
Some parts of SOME/IP are implemented in [2, SWS SOME/IP Transformer], [3, SWS
Socket Adaptor] and [4, SWS Service Discovery].
Other functionality is currently not supported by AUTOSAR. Among others, the following functionality is not implemented in AUTOSAR:
• Exceptions and exception-specific error data structures
• Structs with variable length
• Tunneling of SOME/IP messages through CAN and FlexRay leads to SOME/IP
messages without parts of the header inserted by [3, SWS Socket Adaptor]

--------------------------------------------------------------------------------------------

Message ID [32 Bit]
The Message ID shall be a 32 Bit identifier that is used to
identify
• the RPC call to a method of an application
• or to identify an event.

The assignment of the Message ID is up to the user / system designer. However,
the Message ID is assumed be unique for the whole system (i.e. the vehicle)


